import React, { useState } from "react";
import Select from "react-select";
import axios from "axios";
import ResultCard from "../../Components/ResultCard";
import { BASE_URL } from "../../utils/constant";
import symptomList from "../../Components/SymptomList";

const symptomOptions = symptomList.map((s) => ({ label: s, value: s }));

const SymptomChecker = () => {
  const [selectedSymptoms, setSelectedSymptoms] = useState([]);
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleSubmit = async () => {
    if (selectedSymptoms.length === 0) return;
    setLoading(true);
    setResults(null); // Clear previous results while loading new
    try {
      const res = await axios.post(
        "https://ai-medical-recommendation.onrender.com/predict",
        {
          symptoms: selectedSymptoms.map((s) => s.value),
        }
      );
      setResults(res.data);
    } catch (err) {
      console.error("Error fetching prediction", err);
    }
    setLoading(false);
  };

  return (
    <div className="min-h-screen p-6 bg-blue-50">
      <h1 className="mb-4 text-3xl font-bold text-blue-700">
        üß† AI Medical Diagnosis
      </h1>

      <div className="mb-6">
        <p className="mb-2 font-medium">Search and Select Symptoms:</p>
        <Select
          isMulti
          options={symptomOptions}
          value={selectedSymptoms}
          onChange={setSelectedSymptoms}
          className="text-sm"
          placeholder="Type to search symptoms..."
        />
      </div>

      <button
        className="px-5 py-2 mb-6 text-white bg-green-600 rounded-lg hover:bg-green-700 disabled:opacity-50"
        onClick={handleSubmit}
        disabled={loading}
      >
        {loading ? "Checking..." : "Check Diagnosis"}
      </button>

      {/* Loader Spinner */}
      {loading && (
        <div className="flex items-center space-x-2 text-gray-600 animate-pulse">
          <svg
            className="w-5 h-5 text-blue-600 animate-spin"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            />
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"
            />
          </svg>
          <span>Fetching diagnosis...</span>
        </div>
      )}

      {/* Disclaimer AFTER API call */}
      {results && (
        <div className="p-4 mb-4 text-sm text-yellow-800 bg-yellow-100 border-l-4 border-yellow-500 rounded-lg">
          ‚ö†Ô∏è <strong>Disclaimer:</strong> This diagnosis is generated by an AI
          model and may not be 100% accurate. Please consult a certified medical
          professional for any serious health concerns.
        </div>
      )}

      {/* Results Section */}
      {results && (
        <div className="mt-6">
          <h2 className="mb-2 text-xl font-semibold text-gray-800">
            Predicted Disease:{" "}
            <span className="text-blue-700">{results.disease}</span>
          </h2>
          {results.results.map((item, index) => (
            <ResultCard key={index} data={item} />
          ))}
        </div>
      )}
    </div>
  );
};

export default SymptomChecker;
